@model IEnumerable<ShippingViewModel>

@{
    //var aggr = ViewData["Aggr"] as AggregateViewModel;
}

@* @if(TempData["Msg"] != null){
    if ((bool)TempData["Success"])
    {
        <script>
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: 'Upload',
                // (string | mandatory) the text inside the notification
                text: '{@TempData["Msg"]}',
                // (string | optional) the image to display on the left
                time: '10000',
                // (string) specify font-face icon  class for close message
                close_icon: 'l-arrows-remove s16',
                class_name: 'success-notice'
            });
        </script>
    }
    else
    {
        <script>
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: 'Upload',
                // (string | mandatory) the text inside the notification
                text: '{@TempData["Msg"]}',
                // (string | optional) the image to display on the left
                time: '10000',
                // (string) specify font-face icon  class for close message
                close_icon: 'l-arrows-remove s16',
                class_name: 'error-notice'
            });
        </script>
    }
} *@

<div class="row mt-3 mb-3">
    <div class="col-sm-9">

        <div style ="display:flex" class="mb-3">
            <div class="me-3">
                <span class="normalText">Average:</span>
                <div style="display:inline-block">
                    <span class="badge bg-primary bg-gradient text-white badgeText" id="avgCod"></span>
                </div>
            </div>

            <div class="me-3">
                <span class="normalText">Sum:</span>
                <div style="display:inline-block">
                    <span class="badge bg-primary bg-gradient text-white badgeText" id="sumCod"></span>
                </div>
            </div>

            @* <div class="me-3">
                <span class="normalText">Max:</span>
                <div style="display:inline-block">
                    <span class="badge bg-primary bg-gradient text-white badgeText" id="maxCod"></span>
                </div>
            </div> *@
        </div>

        <form style="display:flex; align-items:center;">
            <label class="normalText me-1" for="customerName">Customer</label>
            <div style="width:150px">
                @(Html.Kendo().TextBox()
                    .Name("customerName")
                    .Size(ComponentSize.Small)
                    .Rounded(Rounded.Small)
                    .FillMode(FillMode.Solid)
                    .HtmlAttributes(new { style = "width: 100%" })
                    )
                @* <input class="form-control form-control-sm" onkeypress="handle(event)" type="text" id="customerName" name="customerName"> *@
            </div>
            <span class="me-3"></span>
            <label class="normalText me-1" for="cod">COD</label>
            <div style="width:150px">
                @(Html.Kendo().TextBox()
                    .Name("cod")
                    .Size(ComponentSize.Small)
                    .Rounded(Rounded.Small)
                    .FillMode(FillMode.Solid)
                    .HtmlAttributes(new { style = "width: 100%" })
                    .SuffixOptions(suffix => suffix.Template("<span style='font-weight:500;padding-inline:5px'>₫</span>"))
                    )
               @*  <input class="form-control form-control-sm" onkeypress="handle(event)" type="text" id="cod" name="cod"> *@
            </div>
            <span class="me-3"></span>
            @(Html.Kendo().Button()
                .Name("filterBtn")
                .Content("Filter")
                .Size(ComponentSize.Small)
                .ThemeColor(ThemeColor.Primary)
                .Events(ev => ev.Click("applyFilter"))
                )
            <span class="me-1"></span>
            @(Html.Kendo().Button()
                .Name("kendoIconTextButton")
                .Content("Clear")
                .Size(ComponentSize.Small)
                //.HtmlAttributes(new { type = "button" })
                .Events(ev => ev.Click("clearFilter"))
                .Icon("filter-clear")
                )
        </form>

    </div>

    <div class="col-sm-3"> 
        <span class="fw-bold">Import Excel Data</span>
        <form class="mt-1 mb-4" asp-action="Upload" asp-controller="Package" enctype="multipart/form-data" method="post">
            <div class="input-group input-group-sm">
                <input type="file" name="file" class="form-control">

                <button type="submit" class="btn btn-primary">Upload</button>
            </div>
        </form>
    </div>
</div>

@(
Html.Kendo().Grid<ShippingViewModel>()
    .Name("grid")
    //.Sortable()
    //.Filterable()
    //.Groupable()
    .Scrollable()
    .Pageable(pager => pager
        .Refresh(true)
        .PageSizes(new[] { 10, 20, 50, 100, 200,})
        .ButtonCount(5)
    )
    .Events(e =>
    {
        e.DataBound("onDataBound");
    })
    .DataSource(dataSource => dataSource
        .Ajax()
        .Read(read => read.Action("TransportWithOrder_Read", "Package").Data("additionalData"))
        .PageSize(20)
        .ServerOperation(true)
        .Events(events => events.Error("onError"))
        .Model(model =>
        {
            model.Id(field => field.ship_id);
            model.Field(field => field.ship_code).Editable(false);
            model.Field(field => field.order_code).Editable(false);
        })
        .Aggregates( aggregates =>
        {
            aggregates.Add(p => p.cod).Sum().Average();
        })
    )
    .Columns(columns =>
    {
        columns.Select().Width(50)
            .ClientHeaderTemplate(@"<input tabindex='-1' id='header-check-all' class='k-select-checkbox
                    k-checkbox k-checkbox-md k-rounded-md' data-role='checkbox' aria-label='Select all rows' type='checkbox'/>")
            .ClientFooterTemplate(@"<input tabindex='-1' id='footer-check-all' class='k-select-checkbox
                    k-checkbox k-checkbox-md k-rounded-md' data-role='checkbox' aria-label='Select all rows' type='checkbox'/>");
        columns.Bound(ts => ts.ship_code).Title("Ship Code").Hidden();
        columns.Bound(ts => ts.ship_name).Title("Products Name").Width("150").ClientTemplate("<div class='text-ellipsis'>#= ship_name #</div>");
        columns.Bound(ts => ts.cod).Title("COD").Format("{0:N0} ₫").HtmlAttributes(new {@class = "hoverCod" })
            .ClientFooterTemplate("<span id='footerSumCod'></span>");
        columns.Bound(ts => ts.problem_type).Title("Problem").Width("150").HtmlAttributes(new { style = "color:red;" }).ClientTemplate("<div class='text-ellipsis'>#= problem_type #</div>")
            .ClientFooterTemplate("<span id='footerCountProblem'></span>"); 
        columns.Bound(ts => ts.status).Title("Status");
        columns.Bound(ts => ts.delivery_service).Title("Service");
        columns.Bound(ts => ts.description).Title("Description").Width("150").ClientTemplate("<div class='text-ellipsis'>#= description #</div>");
        columns.Bound(ts => ts.order_code).Title("Ord Code").Hidden();
        columns.Bound(ts => ts.creation_time).Title("Cre Time").HtmlAttributes(new { style = "color:blue;" }).ClientTemplate("#= kendo.toString(kendo.parseDate(creation_time), 'h:MM dd-MM-yyyy') #");
        columns.Bound(ts => ts.customer_first_name).Title("Customer").ClientTemplate("<a href='/HR/Customer/#=customer_id#'>#= customer_first_name #</a>");
        columns.Bound(ts => ts.shop_first_name).Title("Shop");
    })
    .PersistSelection()
    .Resizable(resize => resize.Columns(true))
    .HtmlAttributes(new { style = "height: 700px" })
)

@* Avvgregate for row click
    .Selectable(selectable => selectable
        .Mode(GridSelectionMode.Multiple)
            .CellAggregates(true)
        )
        .StatusBarTemplate(Html.Kendo().Template()
            .AddHtml(@"${data.aggregates.count>0?`<div>Cells count: ${data.aggregates['count']} Min: ${data.aggregates['min']}
                Max: ${data.aggregates['max']} Sum: ${data.aggregates['sum']} Average: ${formatAggregate(data.aggregates['average'], 'average')}
                Earliest Date: ${formatAggregate(data.aggregates['earliest'], 'earliest')}
                Latest Date: ${formatAggregate(data.aggregates['latest'], 'latest')}</div>`:'No rows are selected'}
            ")
        )
        .Navigatable() *@

<script>
    var cod = document.getElementById("cod");
    var customerName = document.getElementById("customerName");

    cod.addEventListener("beforeinput", function (e) {
        const nextVal =
            e.target.value.substring(0, e.target.selectionStart) +
            (e.data ?? '') +
            e.target.value.substring(e.target.selectionEnd)
            ;
        if (!/^(\d+)$/.test(nextVal)) {
            e.preventDefault();
        }
        return;
    });

    cod.addEventListener("keypress", function(e) {
        handleKeyEnter(e);
    });

    customerName.addEventListener("keypress", function (e) {
        handleKeyEnter(e);
    });

    function handleKeyEnter(e) {
        if (e.keyCode === 13) {
            e.preventDefault(); // Ensure it is only this code that runs
            applyFilter();
        }
    }

    function applyFilter() {
        var grid = $("#grid").data("kendoGrid");
        grid.dataSource.read();
    }

    function clearFilter() {
        $("#customerName").val("");
        $("#cod").val("");
    }

    function additionalData() {
        return {
            customerName: $("#customerName").val(),
            cod: $("#cod").val(),
        };
    }

    function onDataBound(e) {
        var grid = e.sender;
        var data = grid.dataSource.view(); // Get current page data

        // AVG, SUM, MIN, MAX :COD
        var aggregates = grid.dataSource.aggregates().cod;
        console.log(aggregates);
        $("#avgCod").text(formatVND(aggregates.average));
        $("#sumCod").text(formatVND(aggregates.sum));

       
        // --FOOTER CACULATE
        let totalCod = 0;
        let totalProblem = 0;

        for (var i = 0; i < data.length; i++) {
            totalCod += data[i].cod; // Adjust the property name as necessary
            if (data[i].problem_type != "") {
                totalProblem++;
            }
        }
        
        $('#footerSumCod').text(formatVND(totalCod));
        $('#footerCountProblem').text(totalProblem);
        
        // --CHECKBOX ROW
        $(grid.element).find("input#footer-check-all").on("change", function (e) {
            if ($(this).is(':checked')) { // If the checkbox is checked
                let masterRows = $("#grid .k-grid-table .k-master-row"); // Select all Grid rows.
                grid.select(masterRows);
            } else {
                grid.clearSelection(); // Clear the selected rows.
            }
        });
        document.getElementById
        $(grid.element).find("input#header-check-all").on("change", function (e) {
        $(gridInsgridtance.element).find("input#footer-check-all").prop('checked', $(this).is(':checked')); // Toggle the footer checkbox based on the header checkbox.
        });
    }

    function onError(e) {
        if (e.errors) {
            var message = "Errors:\n";
            if (e.status == "customerror") {
                $.each(e.errors, function (key, value) {
                    message += value + "\n";
                });
            }
            else {
                message += "Generic server error." + "\n";
            }   
            $.gritter.add({
                // (string | mandatory) the heading of the notification
                title: 'Load data',
                // (string | mandatory) the text inside the notification
                text: `${message}`,
                // (string | optional) the image to display on the left
                time: '10000',
                // (string) specify font-face icon  class for close message
                close_icon: 'l-arrows-remove s16',
                class_name: 'error-notice'
            });
        }
    }

    function formatVND(fm) {
        return parseFloat(fm).toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ',') + " ₫";
    }

    function formatAggregate(aggregate, key) {
        if (key === "average" || key === "sum" || key === "max" || key === "min") {
            return kendo.toString(aggregate, "n");
        }
        if (key === "earliest" || key === "latest") {
            return kendo.toString(aggregate, "dd/MM/yyyy");
        }
        return aggregate;
    }
</script>

<style> 
    .normalText {
        font-size: 13px;
    }

    .badgeText {
        font-size: 11px;
        font-weight: 500;
    }

    .k-grid tbody > tr td {
        border-bottom: 1px solid #dddddd !important;
    }

    .hoverCod{
        background: #caffca;
        color: black;
    }

    tr:hover .hoverCod{
        background: #b9f8b9;
    }
</style>